plugins {
    id 'java'
    id("net.ltgt.errorprone") version "${error_prone_plagin_version}"
    id 'jacoco'
}

group 'FileHub'
version "${snapshot_version}"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:' + "${guava_version}"
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: "${guava_version}"

    compile group: 'org.slf4j', name: 'slf4j-api', version: "${logger_version}"
    compile group: 'org.slf4j', name: 'slf4j-simple', version: "${logger_version}"

    compile "com.sparkjava:spark-core:${spark_core_version}"
    compile "com.sparkjava:spark-template-velocity:${spark_template_version}"


    testImplementation "com.google.truth:truth:${google_truth_version}"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiter_version}"
    testCompile("org.junit.jupiter:junit-jupiter-params:${junit_Params_Version}")
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junit_Engine_Version}"


    compile group: 'com.google.code.gson', name: 'gson', version: "${gson_version}"

    errorprone("com.google.errorprone:error_prone_core:${error_prone_core_version}")
    errorproneJavac("com.google.errorprone:javac:${error_prone_javac_version}")
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacoco {
    toolVersion = "${jacoco_version}"
    reportsDir = file("$buildDir/JacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}